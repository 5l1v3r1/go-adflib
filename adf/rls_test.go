package adf

import (
	"fmt"
	"log"
	"math"
	"math/rand"
	"reflect"
	"testing"

	"github.com/tetsuzawa/go-adflib/misc"
	"gonum.org/v1/gonum/floats"
)

func TestFiltRLS_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		copy(x[i], xRow)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}

	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name    string
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run RLS Filter",
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{0, 0, 0, 0, -0.07083370077583785, 0.1580894627354706, -0.08719645102038076, -0.10720777411085475, 0.4104774254088424, 0.5239370815669278, 0.27174915148294443, 0.4761497035929073, 0.4187449457788772, -0.17929514481692901, 0.580669233442545, 0.15122671660942283, -0.5724000576851315, 0.015545696475589427, -0.3075318664240403, -0.014040768068631054, 0.2328087739761573, 0.13250283343697683, -0.39487165472107566, 0.1487407596029266, -0.44021870064624535, 0.5305365084925896, 0.5300196997369107, 0.15979754111642772, 0.2138938650214794, -0.07891954153327524, -0.8078218482793795, 0.6530965739304572, -0.4655542767113635, -0.35749197008312317, 0.8782255815716905, -0.20808832721285442, -0.14634305774193238, 0.8753548023972704, -0.3134940842519238, -0.4311926919617277, -0.47047906739419487, -0.9196125022971965, 1.080540803140396, -0.0692107699216383, 0.7287807797731012, -0.6597497785040464, -0.7675208689947604, 0.5482850237090681, -1.0178353109683378, 0.18639419471514093, 0.2780060790358463, 1.5018054953843198, -0.6767569515297152, -0.24460307555630154, 0.049411610995482885, 1.4662765617079996, 0.10045520594378321, 0.10782175570291667, -0.2915650162346456, -0.21273544587545062, 1.7542603847300464, 0.0029209011865537343, 0.48065600575978074, 0.35941104126864193,},
			want1:   []float64{0, 0, 0, -1.233758177597947, -0.45016087037731245, 0.1647157898761093, 0.24600419119681638, -0.6240752420666242, 1.1749265368717807, 0.7749037659505065, 0.46069277432156874, 0.2239711988470775, 0.5808811752323852, -0.13724209807715923, 0.5200599603074758, 0.8384837035991088, -0.8626468644470967, 0.12180467709776135, -0.5385625070315568, 0.1701672633514457, 0.0469349446870142, 0.5702474281252043, -0.6746737476319448, 0.18154862600973515, -0.6804953917103879, 0.39676196227149363, 0.4430146821062746, 0.3503185693695884, 0.037646179037669814, 0.2456102604515728, -0.8308192295770549, 0.50113423977958, -0.3050066711384303, -0.4187212397906439, 0.5420539152171896, -0.12236843526211516, -0.10069165908830366, 0.8602784542572912, 0.10766015699506393, -0.6204726056422163, -0.2070444788689444, -1.0420254087877119, 0.9053784788407362, 0.028072661852645814, 0.474950834713316, -0.17884298401530374, -0.6355718593789048, 0.4259981401795535, -0.9751270590231447, 0.19483954558480956, 0.1315651155236034, 1.0284329479680867, -0.593485766965778, -0.17602473706502195, -0.04725094239284525, 0.9165837837239412, 0.09081091185682444, -0.09781555771807775, -0.16674783197159365, -0.2637221330907384, 0.9768614862943998, 0.04954973746071585, 0.31922039639378486, 0.3659264466750694,},
			want2:   [][]float64{{0, 0, 0, 0,}, {0, 0, 0, 0,}, {0, 0, 0, 0,}, {0, 0, 0, 0,}, {0.21328975205753262, 0.09006854416229718, -0.05580595415095195, -0.027454378128618274,}, {0.24234391341788553, 0.07206675217320302, -0.06466214184240264, 0.013326881271223685,}, {0.24707027051881877, 0.07439193766629414, -0.07536923117363223, 0.036539593004849144,}, {0.24951039437255879, 0.0631555764560212, -0.05100907075653374, 0.056496633705246005,}, {0.27095445714807503, 0.01666536495157836, -0.08909613698590854, 0.03501858719122701,}, {0.34122167559056904, 0.07423172388968421, -0.056633333800459644, 0.06604887950684482,}, {0.37452428326165793, 0.09301172002512073, -0.03868205687468945, 0.09167954595026652,}, {0.3849554731953185, 0.1029826048865459, -0.02444572009008566, 0.0871715297030006,}, {0.3894166193703937, 0.1093521879552887, -0.02646268445364694, 0.09418533805435525,}, {0.40452232345701244, 0.10456888165401369, -0.009829176054057084, 0.10914120247693444,}, {0.40553754871491315, 0.10103852905036248, -0.0130034597731436, 0.11374380742888571,}, {0.41770168102104965, 0.11197579551384525, -0.028862129394560686, 0.11526166316118579,}, {0.43402659444281766, 0.08830521846258292, -0.026596584937061688, 0.1013056441971767,}, {0.45709999773398424, 0.08609683035152274, -0.012992655755344616, 0.09879536419549961,}, {0.45740702747619727, 0.08420549121198094, -0.01264365431943875, 0.09942069661791926,}, {0.46557295794101833, 0.08269866390737579, -0.015343551430495253, 0.09263822654118999,}, {0.46603466341809313, 0.08352593673413138, -0.013265341423979362, 0.08947531066741704,}, {0.4662558241475206, 0.08408151939813244, -0.014110906223327068, 0.08973643196012497,}, {0.47268101600746165, 0.07430274763679608, -0.011091095647738079, 0.07948982878202866,}, {0.4836576256365425, 0.07091302931111951, 0.0004106517961241594, 0.06997308147908303,}, {0.48452778508312006, 0.06796046711307073, 0.002853653476712666, 0.07253657608740971,}, {0.4950857154506997, 0.05922465059121084, -0.006313028122836738, 0.06773091654353197,}, {0.5000332207370793, 0.06441617511085292, -0.003591356263270937, 0.06907298248772939,}, {0.5057305001361205, 0.06740299043991227, -0.002118547143887663, 0.07004898458655105,}, {0.5080012288149465, 0.06852269471934398, -0.0013765407885477634, 0.06275474468057012,}, {0.5081155852914007, 0.0685984765430469, -0.00212150853528442, 0.06327948724935059,}, {0.5085837708896076, 0.06399601182118815, 0.0011203890790070425, 0.06111520635437877,}, {0.5232764070342247, 0.05364676963391723, 0.008029511392002184, 0.06807500885013908,}, {0.5292269488671951, 0.04967420617384538, 0.0040278081609026895, 0.07539714274204838,}, {0.5315648662569127, 0.05202927278675409, -0.00028138521707425385, 0.0763997637724754,}, {0.5347106597061774, 0.046273243540807585, 0.0010578714529172763, 0.07740093224533853,}, {0.541805053802106, 0.04462258920835925, -0.0001760840048163595, 0.08607054013346661,}, {0.5421669336655998, 0.04489311443209869, -0.0020767584570179605, 0.0862959467886073,}, {0.542381432981555, 0.04338607060004754, -0.0018980336317647101, 0.08720910381303029,}, {0.5547638561997946, 0.0419176020798721, -0.009400865666666067, 0.08237548861351324,}, {0.5545880379568494, 0.041019295628377875, -0.009979589500222315, 0.08069990609211786,}, {0.5594074232990128, 0.044124130460591576, -0.000990142936896709, 0.07159918716556841,}, {0.5603839498269007, 0.04695147346416715, -0.0038524831046954674, 0.07165848023967344,}, {0.5737533625621668, 0.033416572660254246, -0.003572109064810521, 0.06345452746856461,}, {0.5850623182835984, 0.0331823088375315, 0.003282624484648859, 0.05867910255291364,}, {0.5850552381570477, 0.033389478602103465, 0.0031382974078386265, 0.058437621489600515,}, {0.5884546015479309, 0.0310212750071649, -0.0008240659607457752, 0.061189017631247886,}, {0.5893078286925333, 0.032448853273695656, -0.001815351456057537, 0.06321675942470102,}, {0.5941859159586684, 0.029061594399591353, 0.005113516581203671, 0.06189133636721442,}, {0.596393063915402, 0.02454672337870958, 0.005977166187528134, 0.06281918184244649,}, {0.6061720227512739, 0.022676106497340857, 0.003967504634323372, 0.050403946133510624,}, {0.6065307553530287, 0.02306150402304923, 0.006348403604938544, 0.04920867554988519,}, {0.6067808948104553, 0.02460680916117229, 0.005572621937123176, 0.048951783428990855,}, {0.6184178506499706, 0.01876476749137102, 0.003638089919713424, 0.04896172067628025,}, {0.6216802034947186, 0.0198450620847623, 0.0036325406941522483, 0.042841842078775186,}, {0.6219926472594248, 0.01984345713280184, 0.0018625439541457552, 0.04269976895827957,}, {0.6219922265813169, 0.019379518711055133, 0.0018253048012108614, 0.042697820770376045,}, {0.6307773312165379, 0.02008467663660123, 0.0018621955474377924, 0.041008117748175595,}, {0.6308470621493262, 0.020088324650829627, 0.0016951059301978388, 0.040834413007380915,}, {0.6308432534844939, 0.020262772531015057, 0.0018764602495764887, 0.03979486453564818,}, {0.6311317696553094, 0.0205627111357855, 0.00015716997145658767, 0.039761833326067204,}, {0.6315916805004157, 0.017926437471051885, 0.00010652156784446182, 0.03898973556052577,}, {0.6410578532802742, 0.018108302709866096, 0.0028789237464689763, 0.04150378301385607,}, {0.641066998062177, 0.0182477082028335, 0.003005338314772641, 0.0413052082650263,}, {0.6419542021132445, 0.0190522354472455, 0.0017415694499211098, 0.04017925700634413,},},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := Must(NewFiltRLS(L, 1.0, 1e-5, nil))
			got, got1, got2, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Run() got = %v\n, want %v\n", got, tt.want)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("Run() got1 = %v,\nwant %v\n", got1, tt.want1)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got1[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got2, tt.want2) {
				t.Errorf("Run() got2 = %v,\nwant %v\n", got2, tt.want2)
				for i := 0; i < n; i++ {
					fmt.Print("{")
					for k := 0; k < L; k++ {
						fmt.Printf("%g, ", got2[i][k])
					}
					fmt.Print("}, ")
				}
				fmt.Println("")
			}
		})
	}
}

func ExampleFiltRLS_Run() {
	rand.Seed(1)

	//filter coefficients
	const (
		//number of samples
		n = 256
		//length of filter
		L = 8
		//step size
		mu = 1.0
		//small value (epsilon)
		eps = 1e-5
	)
	//input value
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//desired value
	var d = make([]float64, n)

	//create data
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, 0.2*rand.NormFloat64()+math.Sin(2*math.Pi*1200*float64(i)/48000))
		copy(x[i], xRow)
		//input value + noise
		d[i] = x[i][0] * rand.NormFloat64() * 0.1
	}

	//make filter instance
	af := Must(NewFiltRLS(L, mu, eps, nil))

	y, e, w, err := af.Run(d, x)
	if err != nil {
		log.Fatalln(err)
	}
	//print result of filtering (only the last value)
	fmt.Println(y[n-1], e[n-1], w[n-1])
	//output:
	//-0.022095847219796176 -0.017228359604847025 [-0.007496557583694153 -0.0052320251064285695 -0.003709594484657589 -0.0025686444464694106 -0.001768044730851791 -0.0009202325027716438 -0.0021726543974386133 -0.000839361001127372]
}

func ExampleExploreLearning_rls() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	mu := 1.0
	eps := 0.001
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][L-1]
	}

	af, err := NewFiltRLS(L, mu, eps, nil)
	check(err)
	es, mus, err := ExploreLearning(af, d, x, 0.001, 1.0, 100, 0.5, 100, "MSE", nil)
	check(err)

	res := make(map[float64]float64, len(es))
	for i := 0; i < len(es); i++ {
		res[es[i]] = mus[i]
	}
	//for i := 0; i < len(es); i++ {
	//	fmt.Println(es[i], mus[i])
	//}
	eMin := floats.Min(es)
	fmt.Printf("the step size mu with the smallest error is %.3f\n", res[eMin])
	//output:
	//the step size mu with the smallest error is 0.798
}

func BenchmarkFiltRLS_Adapt(b *testing.B) {
	rand.Seed(1)
	const (
		L   = 8
		mu  = 0.1
		eps = 1e-5
	)
	af, err := NewFiltRLS(L, mu, eps, nil)
	if err != nil {
		log.Fatalln(err)
	}
	n := b.N
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//noise
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		copy(x[i], xRow)
		d[i] = x[i][L-1]
	}
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		af.Adapt(d[i], x[i])
		af.Predict(x[i])
	}
	b.StopTimer()
}
