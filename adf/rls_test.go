package adf

import (
	"fmt"
	"math/rand"
	"reflect"
	"testing"

	"gonum.org/v1/gonum/floats"
	"github.com/tetsuzawa/go-adf/misc"
)

func TestFiltRLS_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}

	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name    string
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run RLS Filter",
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{-0.3916108209122005, 0.7295028042517872, -0.6069536686049593, 0.4367452376665853, 0.23711830894235797, 0.6307099188599508, -1.0230725554658542, 0.8328042966922731, -0.0345823704649979, 0.12182107719048674, -0.1438856650081231, 0.8802507001774842, -0.3817966179152634, -0.08279243237359318, 0.931368921270108, -1.1124290688507559, 0.36943731338011165, -0.36644659071077407, 0.14557273499634477, -0.31148652899834944, 0.7021839269774173, -0.8002252269760273, 0.5364409768096253, -0.4729094496945779, 0.16618349413014571, 0.4293084370375395, 0.3043448592028126, -0.17370505826416982, 0.6648047372541294, -1.0223548618367746, 0.24489390769174865, 0.3071038546891367, -0.7464448209883984, 0.38053853435028706, 0.5345519216822019, -0.5154949563504854, 0.3615051439491534, 0.3388634380826506, -0.6519205198043806, 0.31383848656752533, -1.1647942358154428, 0.4005490880425621, 0.1777475494646767, 0.2668615029400295, 0.4611044787158347, -1.1051470569314823, 0.24276928680981186, -0.24789889500801957, -0.19740882989083613, -0.28760618339371824, 0.9120479077956632, 0.5604369484957844, -0.2553247306536982, -0.44799569857959803, 0.5602303053124302, 0.8396035826915077, 0.0829316436906902, 0.25468695643856926, -0.6458871039878162, 0.5597885157656031, 0.9956036244697702, -0.010238859892847813, 0.5144997883929885, -0.07031503869557743,},
			want1:   []float64{0.3916108209122005, -0.7295028042517872, 0.6069536686049593, -1.6705034152645322, -0.7581128800955083, -0.3079046662483709, 1.1818802956422898, -1.5640873128697521, 1.619986332745621, 1.1770197703269476, 0.8763275908126362, -0.18012979773749938, 1.381422738926526, -0.23374481052049506, 0.1693602724799128, 2.1021394890592875, -1.8044842355123398, 0.5037969642841249, -0.991667108451942, 0.4676130242811641, -0.4224402083142458, 1.5029754885382085, -1.6059863791626459, 0.8031988353072397, -1.2868975864867789, 0.4979900337265437, 0.6686895226403726, 0.683821168750186, -0.41326469319498016, 1.1890455807550722, -1.883534985548183, 0.8471269590209005, -0.024116126861395415, -1.1567517442240542, 0.8857275751066782, 0.1850381938755158, -0.6085398607793895, 1.396769818571911, 0.4460865925475207, -1.3655037841714694, 0.48727068955230357, -2.3621869991274704, 1.8081717325164555, -0.307999611009022, 0.7426271357705825, 0.2665542944121322, -1.645862015183477, 1.2221820588966412, -1.7955535401006464, 0.6688399236936687, -0.5024767132362136, 1.9698014948566223, -1.014917987841795, 0.02736788595827455, -0.5580696367097926, 1.543256762740433, 0.10833447410991745, -0.24468075845373033, 0.187574255781577, -1.036246094731792, 1.7355182465546761, 0.0627094985401174, 0.2853766137605771, 0.7956525266392888,},
			want2:   [][]float64{{-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 0.31741294852014135,}, {-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 2.085265593698704e-06,}, {-0.6507507226658572, 0.657011901126719, -0.3198462278764056, 0.11462635307984448,}, {-0.6507507226658572, 0.5133799458918684, -0.3804994987363093, 0.15220677235045976,}, {-0.3619572899473559, 0.6353323781942488, -0.4560605273835623, 0.11503365912570085,}, {-0.3130273731174126, 0.605015681942321, -0.4709751732340659, 0.18371310252472972,}, {-0.3218623937722511, 0.6006691923692554, -0.4509603175271334, 0.140321377515018,}, {-0.3101392833340442, 0.5466862344182821, -0.33392656515248464, 0.23620117959635545,}, {-0.256395144386153, 0.43017023588910536, -0.42938219783633247, 0.18237186897259386,}, {-0.15951084571334692, 0.5095426151647956, -0.3846225504603729, 0.22515637325848872,}, {-0.10892672242645987, 0.5380679981985957, -0.3573559287549946, 0.2640874024470727,}, {-0.08908456284986283, 0.5570345676694333, -0.330275637046879, 0.2555122755132318,}, {-0.09267245880403141, 0.5519118031543929, -0.32865348480265183, 0.24987139005026782,}, {-0.056748824156373265, 0.5405363818572776, -0.2890965018755905, 0.2854386834565102,}, {-0.05501973637012993, 0.5345236378671132, -0.29450280472909995, 0.2932776413088573,}, {-0.05105842244657585, 0.5380854164500014, -0.29966726424000745, 0.29377193904378684,}, {-0.010130679889303627, 0.4787415621393045, -0.2939873798869955, 0.25878318678971746,}, {0.03813425239583768, 0.47412205710597305, -0.265530688323909, 0.25353218446601283,}, {0.03940415972417216, 0.4662992793634719, -0.26408718165298656, 0.25611862518068756,}, {0.054440268896536526, 0.4635247247730858, -0.2690585621822336, 0.24362991235471684,}, {0.0557090175983137, 0.4657980383400194, -0.2633477218766501, 0.23493834249484755,}, {0.053718449904385505, 0.4607974900730194, -0.25573717556916786, 0.23258810784511236,}, {0.07065303899388917, 0.43502402132872686, -0.2477779967087554, 0.2055815968853205,}, {0.09678164651057916, 0.42695517104465686, -0.22039935659381737, 0.18292803048213904,}, {0.1006313647341982, 0.4138925851646745, -0.20959114422873398, 0.19426932195307514,}, {0.12059766468838835, 0.3973721188471636, -0.22692642756827702, 0.1851812491404889,}, {0.12680745433233753, 0.40388818569950885, -0.2235103605305545, 0.1868657237836423,}, {0.13540696851453293, 0.40839650607188993, -0.22128729193540458, 0.18833890831661113,}, {0.13983942649660222, 0.4105821666561788, -0.21983889696724265, 0.17410056615099842,}, {0.1385840668461735, 0.40975026411193904, -0.21166093906646294, 0.16834015215316844,}, {0.14085064160366795, 0.3874688645969286, -0.19596630145463678, 0.15786246026461526,}, {0.17416004661395418, 0.36400628809450536, -0.1803027574095829, 0.1736409004193328,}, {0.18421895699634597, 0.35729099040315543, -0.18706731353042683, 0.18601837640286417,}, {0.1844038103707048, 0.3574771997243875, -0.1874080308458406, 0.18609765118027619,}, {0.19309432261036322, 0.3415756971557995, -0.18370822452660307, 0.18886346114450347,}, {0.2046867127823265, 0.3388784930250388, -0.1857245338727502, 0.20302978400705607,}, {0.20413949980050342, 0.3384694210393483, -0.18285044819021795, 0.20268893760932766,}, {0.20543584733366088, 0.32936145467899086, -0.18177030728021415, 0.20820769113413315,}, {0.22554026230119947, 0.3269772121138614, -0.19395209480296713, 0.2003597114574776,}, {0.2248117647484164, 0.32325510659966555, -0.19635001944048164, 0.19341698614140998,}, {0.23541801692177883, 0.33008806533799206, -0.17656651378978006, 0.17338859807096224,}, {0.23311980178844416, 0.3234340295362202, -0.16983011359733927, 0.17324905425282872,}, {0.26342717498959883, 0.2927515083195072, -0.16919452841263674, 0.15465135940399116,}, {0.2860127947471567, 0.2922836495929105, -0.15550463437634945, 0.1451141453603229,}, {0.28609047445686653, 0.2900106835579856, -0.15392114778897295, 0.1477635583001036,}, {0.29140567618703883, 0.2863077902812691, -0.16011664918454427, 0.15206560661058852,}, {0.2901339944336003, 0.2841800740633344, -0.1586392000846053, 0.1490433841511509,}, {0.30276617507471265, 0.2754085077420542, -0.14069636554518544, 0.1456110996153042,}, {0.30909844833983363, 0.26245541278809903, -0.1382185682158872, 0.14827307389711467,}, {0.32710496758650287, 0.25901094600560776, -0.14191906537968843, 0.12541223722758826,}, {0.3283364151618089, 0.26033392821085166, -0.13374597977199576, 0.12130914468779716,}, {0.32738107641628994, 0.25443206095933235, -0.13078309541559627, 0.12229027337110768,}, {0.3496698343304996, 0.2432425493466158, -0.13448838710940145, 0.12230930660473179,}, {0.35524877281414574, 0.245089957449773, -0.13449787682112516, 0.11184372306804344,}, {0.3552001948388939, 0.24509020698369052, -0.1342226821539738, 0.11186581224155559,}, {0.355195226309867, 0.239610740683795, -0.1346625049278134, 0.11184280265782018,}, {0.369986751515129, 0.2407980186574219, -0.1346003917913951, 0.10899784111438186,}, {0.37006993825754075, 0.240802370620142, -0.13479972428836923, 0.10879061698944344,}, {0.3700604110716655, 0.24123874332638817, -0.13434607546757202, 0.10619023812899582,}, {0.36973585988930957, 0.24090134307413444, -0.1324120497559467, 0.10622739486129908,}, {0.37154299231153326, 0.2305426058012771, -0.1326110630500998, 0.10319358315608974,}, {0.38836084808226684, 0.23086571244925583, -0.12768553918075082, 0.10766010710976737,}, {0.3883724215984301, 0.23104214221469413, -0.1275255505593626, 0.1074087935093327,}, {0.3891655641753724, 0.23176137338940014, -0.12865533450581973, 0.10640221573080691,},},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := Must(NewFiltRLS(L, 1.0, 1e-5, "random"))
			got, got1, got2, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Run() got = %v\n, want %v\n", got, tt.want)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("Run() got1 = %v\n, want %v\n", got1, tt.want1)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got1[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got2, tt.want2) {
				t.Errorf("Run() got2 = %v\n, want %v\n", got2, tt.want2)
				for i := 0; i < n; i++ {
					fmt.Print("{")
					for k := 0; k < L; k++ {
						fmt.Printf("%g, ", got2[i][k])
					}
					fmt.Print("}, ")
				}
				fmt.Println("")
			}
		})
	}
}

func ExampleExploreLearning_rls() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	mu := 1.0
	eps := 0.001
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][L-1]
	}

	af, err := NewFiltRLS(L, mu, eps, "random")
	check(err)
	es, mus, err := ExploreLearning(af, d, x, 0.001, 1.0, 100, 0.5, 100, "MSE", nil)
	check(err)

	res := make(map[float64]float64, len(es))
	for i := 0; i < len(es); i++ {
		res[es[i]] = mus[i]
	}
	//for i := 0; i < len(es); i++ {
	//	fmt.Println(es[i], mus[i])
	//}
	eMin := floats.Min(es)
	fmt.Printf("the step size mu with the smallest error is %.3f\n", res[eMin])
	//output:
	//the step size mu with the smallest error is 0.798
}
