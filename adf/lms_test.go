package adf

import (
	"fmt"
	"math/rand"
	"reflect"
	"testing"

	"gonum.org/v1/gonum/floats"
	"github.com/tetsuzawa/go-adflib/misc"
)

func init() {
	rand.Seed(1)
}

/*
func TestFiltLMS_Adapt(t *testing.T) {
	type fields struct {
		filtBase filtBase
		kind           string
		wHist       [][]float64
	}
	type args struct {
		d float64
		x []float64
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := &FiltLMS{
				filtBase: tt.fields.filtBase,
				kind:           tt.fields.kind,
				wHist:       tt.fields.wHist,
			}
		})
	}
}

*/

func TestFiltLMS_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	//n := 100
	//x := NewNormRand2dSlice(n, 4)
	//v := NewNormRandSlice(n)
	//floats.Scale(2.0, x[0])
	//floats.Scale(0.1, x[1])
	//floats.Scale(1.0, x[2])
	//floats.Scale(0.5, x[3])
	//d := make([]float64, n)
	//for i := 0; i < 4; i++ {
	//	floats.Add(d, x[i])
	//}
	//floats.Add(d, v)

	//type fields struct {
	//	filtBase filtBase
	//	kind           string
	//	wHist       [][]float64
	//}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name string
		//fields  fields
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run LMS Filter",
			//fields: fields{
			//	Must(NewFiltLMS(4, 1., "random")),
			//},
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{-0.3916108209122005, 0.02517201175116697, -0.0011946675252372278, 6.282344369003245e-05, -0.050553606725125724, 0.06550552681701775, 0.021482957680639365, 0.023825856946074156, -0.17850258990675139, 0.7449277166477791, 0.10233897599940284, 0.03451807066506019, 0.07484182106500023, -0.09208247618656638, 0.01967130002473734, -0.06964103045492476, -0.19764259109217808, 0.04971122816940757, -7.049473447647285e-05, 0.05443788724030692, -0.008792174266645407, -0.036887952097698684, -0.18596570043120553, 0.07601989584237587, -0.0002731521650133281, -0.054647487086015425, 0.15405728806876284, 0.03222333142582892, -0.09530483145899225, -0.10446940191101409, -0.06659155364404744, 0.5164332558236504, -0.11882591200915478, 0.05813651132303767, 0.16010403954977148, -0.14790938322156505, 0.0089066908762774, -0.0036595147627036095, 0.33060478125947507, 0.08784732508624611, 0.22058316581077722, 0.2422925652709415, 1.109968012798729, 0.0031504974861261414, 0.005533179559006316, -0.37641841400235376, 0.1336552938660423, 0.6012313714647397, -0.05629497193624801, 0.5386542735085826, 0.0234125640400936, -0.06349658871831301, -0.6939480518972886, -0.05730095552909236, -0.016782577218502195, 0.0008680494176780235, 0.15994005302678527, -0.003400661129244653, -0.0012658479453711423, 0.041025605948545804, 0.027727247894811992, -0.01648474918329282, 0.006566799232738431, 0.2380677592855663,},
			want1:   []float64{0.3916108209122005, -0.02517201175116697, 0.0011946675252372278, -1.233821001041637, -0.4704409644280246, 0.2572997257945621, 0.13732478249579624, -0.7551088731235532, 1.7639065521873745, 0.5539131308696551, 0.6301029498051103, 0.6656028317749246, 0.9247842999462622, -0.22445476670752185, 1.0810578937252835, 1.0593514506634563, -1.2374043310400502, 0.08763914540394321, -0.8460238787211206, 0.10168860804250772, 0.2885358929298169, 0.7396382136598799, -0.8835797019218149, 0.25426948977028585, -1.12044094019162, 0.9819459578500986, 0.8189770937744224, 0.47789277906018723, 0.34684487551814147, 0.2711601208293116, -1.572049524212387, 0.6377975578863868, -0.651735035840639, -0.8343497211968047, 1.2601754572391086, -0.18254737925340453, -0.2559414077065134, 1.7392927714172652, -0.5364387085163349, -1.1395126226901902, -0.8981067120739165, -2.20393047635585, 0.8759512691824032, -0.044288605555118626, 1.1981984349274108, -0.46217434851699635, -1.5367480222397074, 0.37305179242388187, -1.9366673980552345, -0.15742053320863214, 0.38615863051935606, 2.5937350320707195, -0.5762946665982046, -0.3633268570922311, 0.018943245821139834, 2.3819922960142628, 0.03132606477382238, 0.01340685911408358, -0.4570470002608681, -0.5174831849147348, 2.7033946231296344, 0.0689553878305624, 0.7933096029208272, 0.487269728658145,},
			want2:   [][]float64{{-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 0.31741294852014135, }, {0, 0, 0, -0.04831530527362725, }, {-0, -0, 0.003105617534459387, 0.0013114481467361298, }, {0, -0.00014739308287721315, -6.224152949815649e-05, 3.8564495227105437e-05, }, {0.1522236749727205, 0.06428140433174383, -0.039828389991871806, -0.019594032495765003, }, {0.02450971885150531, -0.015186081436102375, -0.007470966644723753, 0.034402548740036794, }, {0.008305770298200387, 0.004086118800145095, -0.01881589195406857, 0.04079240047684166, }, {0.0021808238378377945, -0.010042328113944217, 0.021771525428816014, 0.017836303688198732, }, {0.055219829428016946, -0.11971525994033377, -0.09807662487357308, -0.055307339722269123, }, {0.27965044369306163, 0.22910338811846048, 0.12919591120233195, 0.12349478471372269, }, {0.07194450003497783, 0.04057092003025776, 0.03878061610578204, 0.055370603438843716, }, {0.046151381801035944, 0.044114824584765025, 0.06298673675514366, -0.01994510504707417, }, {0.046600245524886966, 0.06653539768612798, -0.021068808523253227, 0.07326484683773435, }, {0.09244385425273981, -0.02927286725767294, 0.10179370768725267, 0.0915268658102068, }, {0.007104829300803476, -0.024706391439131954, -0.02221452214759094, 0.032210312212153654, }, {0.11899519837573269, 0.10699342622686005, -0.15513688030372175, 0.014848370555758744, }, {0.1048451169384647, -0.1520219038730904, 0.01455023174940968, -0.0896311301918375, }, {0.1775733276692113, -0.01699579471296331, 0.10469608421825737, -0.01931916014530588, }, {0.001203726936088081, -0.007415098782073332, 0.0013682792621498648, 0.002451650043576147, }, {0.07158160435950206, -0.013208674311030158, -0.02366698659112863, -0.05945435020591186, }, {0.0015876285983864567, 0.0028446749359492796, 0.007146169589976643, -0.010876058320354251, }, {0.008071610365598569, 0.020276867422650637, -0.030860223769690907, 0.009530034280298999, }, {0.051978094811086506, -0.07910766508245255, 0.024429465116536837, -0.08289229692941139, }, {0.09450286078029295, -0.029183699688757506, 0.09902402236640515, -0.08193421063902835, }, {0.00839825135562727, -0.02849634004418902, 0.02357837090259498, 0.024741295580021222, }, {0.12556939513260643, -0.10389831704211609, -0.10902275576311503, -0.057155497443984425, }, {0.09105569850873695, 0.09554671781000852, 0.05009064527259579, 0.02469987295013173, }, {0.07968928701845235, 0.04177734096533497, 0.020600553425145218, 0.013651588053887647, }, {0.024378080568353576, 0.012020917070034874, 0.007966029090740574, -0.07830947385789921, }, {0.008724537526952344, 0.005781582165324643, -0.05683542606680282, 0.0400339042900461, }, {0.004519987548301039, -0.04443341126674242, 0.03129813669105284, -0.020894539972529897, }, {0.2576024926799081, -0.18145080015241405, 0.12113599714439144, 0.12202456072694254, }, {0.0736165594221479, -0.0491461890741218, -0.049506688965664215, 0.09058507945680543, }, {0.050220156696428216, 0.050588534415705703, -0.09256459087434256, 0.021537024993540585, }, {0.06476332752474545, -0.11850098021673404, 0.027571650763858962, 0.020611334711323908, }, {0.1789801364273258, -0.04164335017496503, -0.031130708723547642, 0.2187202432804065, }, {0.006032401594637049, 0.00450955401419665, -0.031683530234734185, 0.0037574443982175683, }, {0.006322641317791053, -0.04442204189704088, 0.005268142509588081, 0.02691646967048428, }, {0.30187743771306863, -0.035800546179028364, -0.1829153850072927, -0.11784118064804693, }, {0.011041728610651516, 0.05641539740381068, 0.036344985614680574, 0.10522985075990694, }, {0.11983858814649297, 0.07720466331366684, 0.22353111608288703, -0.22629800894613394, }, {0.06084884444870481, 0.1761760174604013, -0.17835674367842677, 0.0036946410978784296, }, {0.4323313575815057, -0.43768280291409445, 0.009066553011287304, -0.2652940790519646, }, {0.17395685155451798, -0.003603497797479683, 0.10544102354643604, -0.07345663946560024, }, {0.0001821949441551451, -0.005331159466821505, 0.0037140104080596766, 0.006214102040419646, }, {0.14423093365502707, -0.10048005355921392, -0.16811835111953566, 0.11673845621474725, }, {0.038757606368844885, 0.06484734676450336, -0.045028868654130166, 0.09210960849697025, }, {0.21561999753471453, -0.1497227725207284, 0.3062680980482571, -0.05858601964169952, }, {0.03634580806170609, -0.07434781843586702, 0.014221993015135721, 0.015279126825559316, }, {0.3859705247513398, -0.07383229558775702, -0.07932031796858237, -0.4900230302546632, }, {-0.00600140186751394, -0.006447491583444498, -0.03983114848975152, 0.019996228604994296, }, {0.015815945159125384, 0.09770734121723927, -0.04905151886014036, -0.01624290600802026, }, {0.6562768090015222, -0.3294673038194506, -0.10909970930592051, 0.0005604201847356533, }, {0.07320341039541574, 0.02424055650365377, -0.00012451817919862667, -0.1373229708320783, }, {0.015282538116528537, -7.850289326141961e-05, -0.08657571601954953, -0.006949211744872722, }, {4.0930076477783495e-06, 0.004513910928096344, 0.00036232010867520004, 1.8954986816179785e-05, }, {0.5675954985296768, 0.045559441908960385, 0.0023834686512279766, -0.10916976735916162, }, {0.0005991614795259378, 3.1345480621275524e-05, -0.0014357137969583677, -0.001492554098067343, }, {1.3415168665036252e-05, -0.0006144535786075422, -0.0006387799635037048, 0.0036615766148217098, }, {0.020947051245367623, 0.02177635072180524, -0.12482510584985727, -0.002398154799550654, }, {0.024655878544018725, -0.141330964420802, -0.002715267320169924, -0.04139225881245664, }, {0.7383300181239235, 0.01418488423912066, 0.21623815647502265, 0.19608734648613854, }, {0.0003618133237639771, 0.005515578752701402, 0.00500159277892045, -0.007856610540623308, }, {0.0634549630978185, 0.057541719454421596, -0.09038778236735541, -0.08053073640010154, },},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			//af := &FiltLMS{
			//	filtBase: tt.fields.filtBase,
			//	kind:           tt.fields.kind,
			//	wHist:       tt.fields.wHist,
			//}
			af := Must(NewFiltLMS(L, 0.1, "random"))
			y, e, wHist, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(y, tt.want) {
				t.Errorf("Run() y = %v, want %v", y, tt.want)
				for _, v := range y {
					fmt.Printf("%g, ", v)
				}
				fmt.Printf("\n")
			}
			if !reflect.DeepEqual(e, tt.want1) {
				t.Errorf("Run() e = %v, want %v", e, tt.want1)
				for _, v := range e {
					fmt.Printf("%g, ", v)
				}
				fmt.Printf("\n")
			}
			if !reflect.DeepEqual(wHist, tt.want2) {
				t.Errorf("Run() wHist = %v, want %v", wHist, tt.want2)
				for _, v := range wHist {
					fmt.Printf("{")
					for _, vv := range v {
						fmt.Printf("%g, ", vv)
					}
					fmt.Printf("}, ")
				}
				fmt.Printf("\n")
			}
		})
	}
}

/*
func TestNewFiltLMS(t *testing.T) {
	type args struct {
		n  int
		mu float64
		w  interface{}
	}
	tests := []struct {
		name    string
		args    args
		want    *FiltLMS
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewFiltLMS(tt.args.n, tt.args.mu, tt.args.w)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewFiltLMS() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewFiltLMS() got = %v, want %v", got, tt.want)
			}
		})
	}
}
*/

func ExampleExploreLearning_lms() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	mu := 0.1
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}

	af, err := NewFiltLMS(L, mu, "zeros")
	check(err)
	es, mus, err := ExploreLearning(af, d, x, 0.00001, 2.0, 100, 0.5, 100, "MSE", nil)
	check(err)

	res := make(map[float64]float64, len(es))
	for i := 0; i < len(es); i++ {
		res[es[i]] = mus[i]
	}
	eMin := floats.Min(es)
	fmt.Printf("the step size mu with the smallest error is %.3f\n", res[eMin])
	//output:
	//the step size mu with the smallest error is 0.182
}
