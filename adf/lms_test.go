package adf

import (
	"fmt"
	"log"
	"math"
	"math/rand"
	"reflect"
	"testing"

	"github.com/tetsuzawa/go-adflib/misc"
	"gonum.org/v1/gonum/floats"
)

func TestFiltLMS_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name string
		//fields  fields
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run LMS Filter",
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{0, 0, 0, 0, -0.26539292139668363, 0.4882296634680577, -0.5210243205293632, 0.1276170558484841, 0.8994426526988119, 2.4658509592656, 0.025876538555887674, -0.06639682561169613, 1.3972507206280944, -0.3450782218414154, 1.9719452198299088, 1.7116140294625195, -0.8839957157590221, 0.08516063221278578, -0.620131890683069, 0.6688145688119344, -0.013455609064407015, 0.39241532930882095, -1.3973408054307417, 0.4892089168028323, -0.9346883964610031, 0.8471087835566294, 0.9998686451104026, 0.40891604442823615, 0.46965185152832745, 0.3077518707034537, -1.372410716824691, 1.3931059183569088, -0.6119258276048003, -0.6704550141771797, 1.4353122200516286, -0.26248008259536176, -0.015929630002299744, 2.137922671873065, -0.5136897149877432, -1.346679678756385, -0.06234619111259043, -1.006926542748302, 3.1941535132721333, 0.3383111371478733, 3.7998134541520443, 3.0543721787392526, 6.103273682919627, 10.680595204293354, 1.6339405917304846, 21.526149982698072, 38.063932969914255, 39.63822702131091, 121.4196908766674, -15.84571905166313, 18.248113943062144, 110.8924947104888, 18.04855403972418, -287.7861880959089, -0.04660042927930874, 33.74675181280389, -117.6281366549554, -492.6728411239347, -156.36273227711777, -57.16632109284264,},
			want1:   []float64{0, 0, 0, -1.233758177597947, -0.25560164975646665, -0.1654244108564778, 0.6798320607057988, -0.8589000720259632, 0.6859613095818112, -1.1670101117481657, 0.7065653872486255, 0.766517728051681, -0.39762459961683194, 0.028540978947327156, -0.871216026079888, -0.7219036092539879, -0.551051206373206, 0.052189741360565006, -0.22596248277252817, -0.5126880735291197, 0.2931993277275785, 0.3103349322533603, 0.32779540307772126, -0.15891953119017055, -0.18602569589563012, 0.08018968720745379, -0.026834263267217384, 0.10120006605777998, -0.21811180746917824, -0.14106115178515616, -0.26623036103174336, -0.23887510464687156, -0.1586351202449935, -0.1057581956965874, -0.015032723262748515, -0.06797667987960782, -0.2311050868279363, -0.40228941521850325, 0.3078557877308833, 0.29501438115244105, -0.6151773551505488, -0.9547113683366064, -1.208234231291001, -0.3794492452168658, -2.596081839665627, -3.8929649412586027, -7.506366411293293, -9.706312040404732, -3.6269029617219672, -21.14491624239812, -37.65436177535481, -37.1079885779585, -122.6899335951629, 15.425091239041807, -18.245953274459506, -108.50963436505687, -17.85728792192357, 287.7961942938938, -0.4117124189269305, -34.223209391770084, 120.35925852597984, 492.72531176258195, 157.16260867927133, 57.89165858078635,},
			want2:   [][]float64{{0, 0, 0, 0,}, {0, 0, 0, 0,}, {0, 0, 0, 0,}, {0, 0, 0, 0,}, {0.7991336014146487, 0.3374601891382757, -0.20908840059508155, -0.10286343275697693,}, {0.8690463141626255, 0.29414267270155, -0.230398948796258, -0.004731931435706438,}, {0.8410113830769357, 0.28035056735102887, -0.1668886161829915, -0.1424208025613502,}, {0.8976917445385287, 0.019347006431307878, 0.3989608162494051, 0.32115086363438766,}, {1.2274437380532839, -0.6955473717000562, -0.1867157949291633, -0.009123708350486426,}, {1.7983947715989435, -0.22779622313181652, 0.07705828694501776, 0.24301061347876263,}, {1.0026205602316318, -0.6765489683149539, -0.3518920036666817, -0.3694406268948003,}, {1.2743175695268092, -0.4168413401244373, 0.01891613541380438, -0.486859113186939,}, {1.5560614883641988, -0.014569989955636797, -0.10846535392632842, -0.043901681770391165,}, {1.347386621894043, 0.05150808214089152, -0.3382457815258188, -0.25050661679570374,}, {1.3426436234316632, 0.06800142373229358, -0.3234159467855797, -0.2720093798920301,}, {0.8391828435979318, -0.3846806553812713, 0.3329578885019828, -0.33483184938074056,}, {0.46408319325390135, 0.15920125970017185, 0.28090218003411543, -0.014162593848019822,}, {0.8792449705165397, 0.11946553794713397, 0.525678875763217, -0.059330282973538054,}, {0.8830083177646391, 0.09628287852556358, 0.5299566815025963, -0.05166541300329442,}, {0.9833807500397331, 0.07776154501270752, 0.49677059926779266, -0.1350328897859023,}, {0.9413575491906985, 0.00246537920597846, 0.3076174684372828, 0.15284727545335378,}, {0.9844184010709273, 0.1106394789374445, 0.14298272214166807, 0.20368860400737715,}, {1.098914577347716, -0.06361710355264225, 0.1967953975484255, 0.02109531974576412,}, {0.9148537425537443, -0.006776748850814675, 0.003928810537989796, 0.1806765121444344,}, {0.8872967895364511, 0.08672751418084049, -0.07343825454178506, 0.09949357405235527,}, {0.9967496394750592, -0.00383569106575167, -0.16846818849848028, 0.049673854220970294,}, {1.0357885209922832, 0.0371286533633525, -0.14699251154531806, 0.06026358588392776,}, {1.0220804240878054, 0.029942143610396377, -0.15053620472169665, 0.05791524900020871,}, {1.0491829107289248, 0.04330647487475184, -0.1416799210446776, -0.029145808294924344,}, {1.0203793875571006, 0.02421893752915836, 0.04595873677968981, -0.16131527702775555,}, {1.0080347555357825, 0.14557195137673, -0.03952025542443452, -0.10424976424496993,}, {1.2370691585593434, -0.015755973903462728, 0.0681817722306473, 0.004242285383738317,}, {1.0923177301932383, 0.08087963530010359, 0.1655262283925094, -0.17387415666346784,}, {1.1564926952178185, 0.14552534013924423, 0.047240468796342916, -0.1463525813316991,}, {1.1995904222076743, 0.06666708673248847, 0.0655884370477644, -0.13263645972034793,}, {1.1883813211764083, 0.06927511088929825, 0.0675380794283246, -0.1463343892976262,}, {1.2001745817937348, 0.07809122581848547, 0.005597221633420232, -0.13898863813233764,}, {1.2301473461270822, -0.13249345328383283, 0.03057108713960689, -0.01138990817607699,}, {0.8635782300040735, -0.08902092791398053, 0.2526848413684159, 0.13170438121597955,}, {0.8303104679499375, -0.25899558344110596, 0.14318058022185925, -0.18534395057292014,}, {0.6674258648000717, -0.3639321580425453, -0.1606429018296785, 0.12224029212307086,}, {0.8862443650023204, 0.269614333457192, -0.8020315018312842, 0.13552658919490548,}, {1.8694633224955588, -0.7257750169735933, -0.7814121166224876, -0.46781194561268347,}, {0.6097491025335724, -0.699680170024353, -1.5449667311250654, 0.06412670732641768,}, {0.6179442601631977, -0.9394765726186419, -1.3779099509643613, 0.3436380076205143,}, {-1.0226732765415785, 0.2034775342484033, 0.5344254135719673, -0.9842543773226764,}, {0.6912481413109628, 3.071127704717521, -1.4568209413634121, 3.088975256380185,}, {6.220615408612783, -0.7683686639460854, 6.3971296000012465, 1.5865931812845744,}, {1.255849796294517, 9.3873965262129, 4.454433437068228, -0.5005053727219766,}, {5.05069738551385, 8.661480190766728, 3.6745590733117997, -5.318393257352229,}, {0.8185907441190796, 4.114797173531011, -24.41382290462898, 8.782674084952003,}, {-7.278033770551438, -45.90432253151759, 0.6970209993592462, 17.09787179529222,}, {-56.57136487965355, -21.15784257970559, 8.89156333417921, 17.05577831073282,}, {25.247782380870852, 5.935726579658528, 8.752389883305359, -136.42953490175285,}, {21.841465627505542, 5.953224047583363, 28.0492049583511, -134.88062880979672,}, {21.820768311863752, -16.872494176631296, 26.217042817953093, -134.97647943576206,}, {-113.9249667216881, -27.768457843839407, 25.647014153475492, -108.86751565433697,}, {-115.71810114270694, -27.862266712009404, 29.943732010061716, -104.40068956499148,}, {-114.20623465052832, -97.11013080462851, -42.04567392363787, 308.25271276767705,}, {-114.10717077756416, -97.00714496589359, -42.63600323938732, 308.241371290558,}, {-105.54656934465491, -146.07771669081265, -43.578752907393664, 293.8698440513785,}, {67.02922740915436, -142.7621699307784, 6.964325697312937, 339.7029122221295,}, {80.60237359672965, 64.15048862111178, 194.59519913439337, 44.96826205128838,}, {146.6004711380379, 123.99835280461595, 100.58487455147122, -38.78996798367642,},},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := Must(NewFiltLMS(L, 0.525, make([]float64, L)))
			y, e, wHist, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(y, tt.want) {
				t.Errorf("Run() y = %v, want %v", y, tt.want)
				for _, v := range y {
					fmt.Printf("%g, ", v)
				}
				fmt.Printf("\n")
			}
			if !reflect.DeepEqual(e, tt.want1) {
				t.Errorf("Run() e = %v, want %v", e, tt.want1)
				for _, v := range e {
					fmt.Printf("%g, ", v)
				}
				fmt.Printf("\n")
			}
			if !reflect.DeepEqual(wHist, tt.want2) {
				t.Errorf("Run() wHist = %v, want %v", wHist, tt.want2)
				for _, v := range wHist {
					fmt.Printf("{")
					for _, vv := range v {
						fmt.Printf("%g, ", vv)
					}
					fmt.Printf("}, ")
				}
				fmt.Printf("\n")
			}
		})
	}
}

func ExampleFiltLMS_Run() {
	rand.Seed(1)

	//filter coefficients
	const (
		//number of samples
		n = 256
		//length of filter
		L = 8
		//step size
		mu = 0.1
	)
	//input value
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//desired value
	var d = make([]float64, n)

	//create data
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, 0.2*rand.NormFloat64()+math.Sin(2*math.Pi*1200*float64(i)/48000))
		copy(x[i], xRow)
		//input value + noise
		d[i] = x[i][0] * rand.NormFloat64() * 0.1
	}

	//make filter instance
	af := Must(NewFiltLMS(L, mu, nil))

	y, e, w, err := af.Run(d, x)
	if err != nil {
		log.Fatalln(err)
	}
	//print result of filtering (only the last value)
	fmt.Println(y[n-1], e[n-1], w[n-1])
	//output:
	//0.06387088068610643 -0.10319508751074963 [-0.003741875985062278 0.013838419910813545 0.009131739612541507 0.030741434038597575 0.015705215300138888 0.009312489706017198 -0.004147832537867598 -0.010268775367154906]
}

func ExampleExploreLearning_lms() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	mu := 0.1
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}

	af, err := NewFiltLMS(L, mu, nil)
	check(err)
	es, mus, err := ExploreLearning(af, d, x, 0.00001, 2.0, 100, 0.5, 100, "MSE", nil)
	check(err)

	res := make(map[float64]float64, len(es))
	for i := 0; i < len(es); i++ {
		res[es[i]] = mus[i]
	}
	eMin := floats.Min(es)
	fmt.Printf("the step size mu with the smallest error is %.3f\n", res[eMin])
	//output:
	//the step size mu with the smallest error is 0.525
}

func BenchmarkFiltLMS_Adapt(b *testing.B) {
	rand.Seed(1)
	const (
		L  = 8
		mu = 0.1
	)
	af, err := NewFiltLMS(L, mu, nil)
	if err != nil {
		log.Fatalln(err)
	}
	n := b.N
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//noise
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		copy(x[i], xRow)
		d[i] = x[i][L-1]
	}
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		af.Adapt(d[i], x[i])
		af.Predict(x[i])
	}
	b.StopTimer()
}
