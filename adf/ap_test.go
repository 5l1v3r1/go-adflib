package adf

import (
	"fmt"
	"math/rand"
	"reflect"
	"testing"

	"github.com/tetsuzawa/go-adflib/misc"
	"gonum.org/v1/gonum/floats"
)

/*
func TestFiltAP_Adapt(t *testing.T) {
	type fields struct {
		filtBase filtBase
		kind           string
		order          int
		eps            float64
		wHist       *mat.Dense
		xMem           *mat.Dense
		dMem           *mat.Dense
		yMem           *mat.Dense
		eMem           *mat.Dense
		epsIDE         *mat.Dense
		ide            *mat.Dense
	}
	type args struct {
		d float64
		x []float64
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := &FiltAP{
				filtBase: tt.fields.filtBase,
				kind:           tt.fields.kind,
				order:          tt.fields.order,
				eps:            tt.fields.eps,
				wHist:       tt.fields.wHist,
				xMem:           tt.fields.xMem,
				dMem:           tt.fields.dMem,
				yMem:           tt.fields.yMem,
				eMem:           tt.fields.eMem,
				epsIDE:         tt.fields.epsIDE,
				ide:            tt.fields.ide,
			}
		})
	}
}
*/

func TestFiltAP_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 8
	//input value
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		copy(x[i], xRow)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	//type fields struct {
	//	filtBase filtBase
	//	kind           string
	//	order          int
	//	eps            float64
	//	wHist       *mat.Dense
	//	xMem           *mat.Dense
	//	dMem           *mat.Dense
	//	yMem           *mat.Dense
	//	eMem           *mat.Dense
	//	epsIDE         *mat.Dense
	//	ide            *mat.Dense
	//}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name string
		//fields  fields
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run AP Filter",
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{0.7482558344699092, -0.07998356706242687, -0.10614175385089292, -0.5767165443443951, -0.32810518778926023, -0.26935020349557026, -0.3684370027355859, -0.30611083524969224, 0.5618049463713368, 0.9114879573604269, -0.6940268111814207, 0.16985805183102243, -0.09446948993260196, 0.19803426130566526, -1.0623942348930517, 2.3073102189369177, -1.887849369112154, 0.06830026340893816, 0.22339211140435333, -0.7349493854854341, 0.21420198699820392, 0.5745677964402756, -0.8088384094750158, -0.32115986021550735, 0.49158180724801404, -0.8347658619672836, 0.653430655162975, 0.29999127709805445, -0.9020149614908558, 1.3361494541478844, 0.19271833270305955, -0.5896888609914627, 0.8789689197163446, -0.8343174363389382, -0.5312323048114138, 0.5254710574739412, -0.3318124125525758, 0.24906962681261421, 1.0020809806721322, -1.4656212399384068, 1.1009629904953222, 0.3864600162470734, 0.11143937618188782, -0.29319165411133885, -1.3908683274473956, 0.03762816294466331, 0.9178195455323499, 0.09912005214992277, 0.2987433583309256, -0.04987430901981785, -0.6804971681910496, -0.066922971507794, -1.6381381251721894, 0.4334235818832218, 0.4928815844349793, 1.4872842418815715, -1.0571451340733937, -0.7439574414369525, 0.23358590410297483, 1.7000149092413555, 0.07434994419556167, -0.08587010644924198, -0.35084368026420765, -0.25057830129986447,},
			want1:   []float64{-0.7482558344699092, 0.07998356706242687, 0.10614175385089292, 0.5767165443443951, 0.32810518778926023, 0.26935020349557026, 0.3684370027355859, -0.9276473423482547, -1.082799517524487, -0.588682704748847, 0.8528345513578564, -0.9011410680085015, 1.679873452213225, 1.1008065862117689, 1.794836160697565, -1.6071893164969329, 2.8874754901234168, -0.3848375063030264, 0.8773370823456674, 1.7246598056939657, -1.649248909130432, -0.4372174228669248, -0.037255963980581286, 0.477286355498322, -0.21183808858484254, 1.537516123529465, -1.7229760575159956, 0.03029810851460729, -0.2186991308657774, -0.4088509833838012, 0.7803160491401258, 1.0998049714774787, -0.6274288756571954, 1.0010081552572356, -1.1074087730450206, 0.628759756236096, -0.43874853529721797, -1.0252828366863813, 0.41819851611674785, 1.1351644774634373, -1.3479977073255582, 1.349173240407488, -0.3172733034387477, -0.7584736434926052, 0.7133447811842564, -1.9992660740295718, 1.0680997364487823, -0.14025816021891524, 0.9049882561554916, -0.7887184534995323, -0.7225955601826156, 1.0412061353964155, -0.3548242448192931, -0.05218984158327128, -0.08331038987552963, 1.042954201470835, -0.21309758442209947, 0.32332962881562904, -0.2314252355003372, 0.6828454361905854, 0.11691617360504598, 0.0958763044340809, -0.1074691679420316, -0.22587927766632454,},
			want2:   [][]float64{{-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 0.31741294852014135, 0.550268367745034, -0.17847363231294683, 0.3054807669276123, -0.6064850049680873, }, {-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 0.31741294852014135, 0.550268367745034, -0.17847363231294683, 0.3054807669276123, -0.5698827659110666, }, {-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 0.31741294852014135, 0.550268367745034, -0.17847363231294683, 0.2933218116518582, -0.5375252859963865, }, {-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 0.31741294852014135, 0.550268367745034, -0.17603538262648538, 0.28204854610459185, -0.5073976654365223, }, {-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 0.31741294852014135, 0.5238211399868772, -0.17878149853505917, 0.27493640967883637, -0.4792442494109144, }, {-0.6507507226658572, 0.657011901126719, -0.5912859617953181, 0.30877391993965403, 0.49739091355715703, -0.186245825384288, 0.27467898365415105, -0.4844819501119639, }, {-0.6507507226658572, 0.657011901126719, -0.5998280402239169, 0.29515979264022, 0.4740449098987445, -0.19106099247315889, 0.2766962015704923, -0.4768146891759685, }, {-0.6507507226658572, 0.6522934083552616, -0.6087568034191786, 0.28216323854469566, 0.4537219642097667, -0.19759729103483475, 0.2848054348558955, -0.4673197623221769, }, {-0.6323698289105109, 0.6465388925934628, -0.6224782031307344, 0.2644767261388387, 0.4598034782129339, -0.22423643502236187, 0.28317756934182087, -0.47025977264426316, }, {-0.6161056217289953, 0.6377568868638148, -0.6368995724659278, 0.27292684188268446, 0.4457004540587332, -0.25788111045421735, 0.2700283942103588, -0.46860252064968066, }, {-0.6036153336017734, 0.6267635447374934, -0.6412253852987597, 0.27197235540698295, 0.4303945784787211, -0.293155239736958, 0.26326639712430255, -0.47502493430798454, }, {-0.5861781454341124, 0.6138539604292669, -0.6106926191525863, 0.28911396679019874, 0.4254111617607878, -0.3139658873602221, 0.25655809846868655, -0.5027192859645965, }, {-0.5744280606207938, 0.5840664934997412, -0.5941888127647267, 0.3006783871907195, 0.41048932816083006, -0.3266120950436125, 0.2656023405010976, -0.529203085856837, }, {-0.5201307049705614, 0.5835870517081385, -0.5651551527112024, 0.29296817449501034, 0.4112557240560454, -0.35906794241313345, 0.3007011974757422, -0.5412946001321476, }, {-0.4691384913497141, 0.5819848349348425, -0.5631926137925322, 0.3043853016383903, 0.420398726477701, -0.3744643729954177, 0.33699727075892, -0.5492006447595781, }, {-0.3880255868441301, 0.5840424611274728, -0.5516789661628929, 0.2866705945083782, 0.45466382811260314, -0.37097995457242344, 0.318264976098778, -0.5660176253071331, }, {-0.35677390173275186, 0.5943339715666394, -0.5049437470955335, 0.2677956372642245, 0.4567433525034058, -0.30547923289270335, 0.32215973208650217, -0.5273317907484435, }, {-0.31929182401298145, 0.5779975262937112, -0.4443552302876871, 0.2826928568476032, 0.40431621051622574, -0.26114595534044316, 0.2699490242641014, -0.5081759379436571, }, {-0.28586407670131014, 0.5616358693101653, -0.39045317608757274, 0.2968167917604116, 0.35701969581262727, -0.22191601199195504, 0.22027504319227842, -0.48921160963405824, }, {-0.2503469408334656, 0.5543860849654454, -0.36564344863948733, 0.30914826296508097, 0.28578708248311835, -0.1979764059317098, 0.1953334373611541, -0.46157423582506535, }, {-0.16951030872364575, 0.5259263349498167, -0.34088046168560104, 0.3023295424827643, 0.2305409838067554, -0.19003005431318973, 0.1969589286017825, -0.4759472843345619, }, {-0.10726859563953081, 0.5067370787316949, -0.3433025702725453, 0.29045815885975795, 0.21616548082077697, -0.19442117902875794, 0.2343680989930831, -0.49355266692371275, }, {-0.05055807797922808, 0.49703458098632824, -0.33052007664656247, 0.26067388433095645, 0.19131238497122605, -0.17547367035917008, 0.2676358092956732, -0.4932885427974982, }, {-0.004898796869438851, 0.4760723736749406, -0.3033624146168567, 0.24041088917697348, 0.15414576121812243, -0.15725153464079653, 0.28713025285623156, -0.48986662747085746, }, {0.03133934308660206, 0.4855682000798778, -0.27952561990488667, 0.2372988665784924, 0.1276758336761151, -0.15809334428973923, 0.3062757371563029, -0.4784988952626441, }, {0.03134799046624365, 0.4930490744949405, -0.26994383818917284, 0.22133439136211666, 0.13326627729371504, -0.15760993676751536, 0.30275549638844457, -0.4647503666680192, }, {0.04109410781332639, 0.46423488407072616, -0.25288951850215996, 0.19311376991999643, 0.1478637850365479, -0.1290422742009456, 0.3058906200105885, -0.4405397031326832, }, {0.08735300875168758, 0.43426907638054835, -0.22178112896149094, 0.1507458246581483, 0.13077682742750985, -0.11386199341093607, 0.30746897991719807, -0.44395608014017596, }, {0.12773731605708102, 0.4119759729484487, -0.19316870957561377, 0.1051981899432177, 0.11699525559907384, -0.10689744262023079, 0.31316756373327476, -0.4375442732476532, }, {0.1597989346568143, 0.3921387070414516, -0.15934108598990204, 0.06331396514219717, 0.110039662730259, -0.10182872201522435, 0.3090075792089632, -0.4281176894445426, }, {0.18007281340052905, 0.3708119729664111, -0.13898708210277097, 0.034559744701393474, 0.08197103274620753, -0.09739209123406405, 0.29390057859278074, -0.42610267268941127, }, {0.18892868914851293, 0.36905338087352924, -0.14346089281871596, 0.0321077348762529, 0.06355303374550719, -0.07904956739749902, 0.286522560640047, -0.4324742168187886, }, {0.21991535384787822, 0.3704775777739515, -0.1461822914757388, -0.003602522052000158, 0.056967817086086704, -0.06901781842633625, 0.2656774487164414, -0.4221504228441989, }, {0.24212463878857626, 0.38051653648077055, -0.1447878188477285, -0.02846997754980098, 0.050054550898022944, -0.06224584246917888, 0.23991835995305094, -0.40713108397092845, }, {0.26847347068348665, 0.36763986186690306, -0.1379598768042953, -0.06068620034643997, 0.03640099365500723, -0.052086423679122903, 0.22523615367502198, -0.39312716092577843, }, {0.3097594247356541, 0.3435520738516718, -0.12078277596851389, -0.08514810627509053, 0.030137068709384797, -0.057865980606242116, 0.21584630927490006, -0.3929380348907088, }, {0.33209986324733237, 0.31899875332725486, -0.10032716463988654, -0.07919707814242306, 0.031084629150676658, -0.04413259018571496, 0.22188592377907246, -0.39743809158856486, }, {0.3631854745807523, 0.2930373116330059, -0.10312624927392511, -0.08370237759273105, 0.01128903346898115, -0.05016905221777729, 0.22175627663604552, -0.38865248573194194, }, {0.38537741956458826, 0.28049557057527635, -0.1032575476617908, -0.08069266643525501, -0.01546643185510491, -0.06185745627183008, 0.22710969712962295, -0.3811146666073429, }, {0.40205224320456423, 0.2677264799910742, -0.10445242654804304, -0.07482561893365185, -0.03846390534230042, -0.07413025424790447, 0.2302781084340186, -0.37246581681175694, }, {0.4165328577131181, 0.25484904034041383, -0.09452524292947491, -0.06455767017909786, -0.06277462310465608, -0.09092299607613885, 0.22091869554695434, -0.3541984769017243, }, {0.42732478525492545, 0.22630840019403797, -0.08087044137063906, -0.04950049671678496, -0.07766294896597996, -0.0798112307313856, 0.19911038732651168, -0.34300040629457396, }, {0.4487211229509718, 0.2115013346823934, -0.07898859038157131, -0.04171960191418633, -0.09824766309054181, -0.061493896600755216, 0.17169271625392754, -0.33005874417305214, }, {0.4604610153774437, 0.1943963366587309, -0.07708801673755904, -0.0482471378085504, -0.10871670437390678, -0.03909813192081728, 0.151184259392811, -0.31126719712440704, }, {0.4834630628248249, 0.1814745092118206, -0.059202221533410274, -0.058859713314653866, -0.11244324379711505, -0.01889639535539688, 0.13606571741356815, -0.2891931937095572, }, {0.4979659868750439, 0.16602714817104375, -0.047026356158650646, -0.07055459623385672, -0.12258269740466904, -0.010022135496797943, 0.12602804904065604, -0.2649768416896129, }, {0.524264797217546, 0.14999283942708727, -0.04006222444371617, -0.07961156889661636, -0.12245011709240884, 0.004321815937137891, 0.11139905229252106, -0.23529015010973603, }, {0.5476165438995237, 0.13313290888476426, -0.03492140379977605, -0.09463018221422669, -0.11815451932835257, 0.01775015948009917, 0.09938407767973045, -0.2150182768676985, }, {0.5687133488717169, 0.11832999298833427, -0.03241291928138216, -0.10878344894428557, -0.11335775104415703, 0.028673936581902246, 0.08656786253269358, -0.19697809926090146, }, {0.5895246683312523, 0.10523803006747165, -0.03481784432118856, -0.1185793985882736, -0.11495495933957157, 0.03739546916917173, 0.07735031366036878, -0.17520080836117027, }, {0.6044590624495989, 0.10732334771794268, -0.037874861371975634, -0.11661821080673507, -0.12745472824281176, 0.03893500680887226, 0.06460855803165758, -0.16114655760918356, }, {0.6196103886126364, 0.10445864972900028, -0.03204563106119093, -0.1042105002145205, -0.1377829011537608, 0.02636041232100861, 0.05965139947311886, -0.1478873259810033, }, {0.6375844737341078, 0.0889374415065945, -0.033736676978036895, -0.09136815856664318, -0.1292076795088431, 0.011501733524166577, 0.052408604544078245, -0.13251377475873394, }, {0.6576175466267693, 0.08317143157850626, -0.031926496805955586, -0.08637879940889315, -0.11713914896573943, -0.0044005837808766355, 0.04004000257984896, -0.13049691997015453, }, {0.6662817487400814, 0.07089224577332026, -0.02871458179954171, -0.08560816154984943, -0.10484390990713857, -0.01579972273424804, 0.03828815162339371, -0.1313521365297712, }, {0.674730513036322, 0.06610322553933608, -0.027546673468525303, -0.08312031285666545, -0.08545517601884366, -0.016469927950351022, 0.03852802752838854, -0.12874910409999313, }, {0.6923645710699092, 0.05838602048802437, -0.027959842093566757, -0.07537847997356113, -0.06790757809309668, -0.013859157538455394, 0.04196831449439947, -0.12366939764579156, }, {0.7091634952240676, 0.05079332898707416, -0.030119878025424374, -0.07777934663886289, -0.05348498354715467, -0.012912483718028769, 0.042747768576238736, -0.12600703167190463, }, {0.7251665993464711, 0.045749386932610804, -0.02480973797967967, -0.07806634210360101, -0.037560469203423076, -0.010374466655036956, 0.041210323802574084, -0.1177189129377868, }, {0.7393467033356319, 0.03889927763572852, -0.01928087488143039, -0.07871325214197906, -0.02368022496127577, -0.010865884637193941, 0.04037192822990644, -0.11100767581504904, }, {0.749022486038061, 0.03684169832392384, -0.015091190941772265, -0.07965592384973912, -0.025235634379888724, 0.0013279696928990437, 0.03638243679800019, -0.10257296752332251, }, {0.7581627985677027, 0.0348067593938382, -0.01192447182400539, -0.08175280080329067, -0.02345312341883459, 0.0122179372863991, 0.03350559089246833, -0.09412715383890756, }, {0.7670715897607048, 0.03229093061205325, -0.013151990765882044, -0.08124221810604972, -0.021270504430289324, 0.023579642858435283, 0.03224604534215021, -0.09154924439532039, }, {0.775462018820186, 0.03285864587363089, -0.015848765891070093, -0.08086079879252395, -0.020724884247733878, 0.03286916002246678, 0.034604485268215565, -0.08850768411661318, },},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			//af := &FiltAP{
			//	filtBase: tt.fields.filtBase,
			//	kind:           tt.fields.kind,
			//	order:          tt.fields.order,
			//	eps:            tt.fields.eps,
			//	wHist:       tt.fields.wHist,
			//	xMem:           tt.fields.xMem,
			//	dMem:           tt.fields.dMem,
			//	yMem:           tt.fields.yMem,
			//	eMem:           tt.fields.eMem,
			//	epsIDE:         tt.fields.epsIDE,
			//	ide:            tt.fields.ide,
			//}
			af := Must(NewFiltAP(L, 0.1, 4, 1e-5, "random"))
			got, got1, got2, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Run() got = %v, want %v", got, tt.want)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("Run() got1 = %v, want %v", got1, tt.want1)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got1[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got2, tt.want2) {
				t.Errorf("Run() got2 = %v, want %v", got2, tt.want2)
				fmt.Println(len(got2), len(got2[0]))
				for i := 0; i < n; i++ {
					fmt.Print("{")
					for k := 0; k < L; k++ {
						fmt.Printf("%g, ", got2[i][k])
					}
					fmt.Print("}, ")
				}
				fmt.Println("")
			}
		})
	}
}

/*
func TestNewFiltAP(t *testing.T) {
	type args struct {
		n     int
		mu    float64
		order int
		eps   float64
		w     interface{}
	}
	tests := []struct {
		name    string
		args    args
		want    AdaptiveFilter
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewFiltAP(tt.args.n, tt.args.mu, tt.args.order, tt.args.eps, tt.args.w)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewFiltAP() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewFiltAP() got = %v, want %v", got, tt.want)
			}
		})
	}
}
*/

func ExampleExploreLearning_ap() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 8
	order := 4
	mu := 1.0
	eps := 0.001
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][L-1]
	}

	af, err := NewFiltAP(L, mu, order, eps, "random")
	check(err)
	es, mus, err := ExploreLearning(af, d, x, 0.001, 5.0, 100, 0.5, 100, "MSE", nil)
	check(err)

	res := make(map[float64]float64, len(es))
	for i := 0; i < len(es); i++ {
		res[es[i]] = mus[i]
	}
	//for i := 0; i < len(es); i++ {
	//	fmt.Println(es[i], mus[i])
	//}
	eMin := floats.Min(es)
	fmt.Printf("the step size mu with the smallest error is %.3f\n", res[eMin])
	//output:
	//the step size mu with the smallest error is 2.071
}
