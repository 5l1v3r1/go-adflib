package adf

import (
	"fmt"
	"log"
	"math"
	"math/rand"
	"reflect"
	"testing"

	"github.com/tetsuzawa/go-adflib/misc"
	"gonum.org/v1/gonum/floats"
)

func TestFiltAP_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 8
	//input value
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		copy(x[i], xRow)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name    string
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run AP Filter",
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{0, 0, 0, 0, 0, 0, 0, 0, -0.04492090438227993, -0.03396761128176863, -0.08004043423742555, -0.13494332716174498, 0.148640716300537, 0.07292748191477508, -0.008061184194098204, 0.5592231083740289, 0.13162720376399906, -0.0518134504474782, 0.2413045467133041, 0.20355959277830926, -0.5975747985426098, 0.2225000646630828, -0.4460819538198695, 0.09344654639833513, 0.16088093554859412, 0.18102288605258013, -0.5061177688610591, 0.29872953291054566, -0.8035647941347046, 0.7721191836536286, 0.531994432951996, 0.08696595137577198, 0.3202841866445347, 0.08141138203144764, -1.1840259221699045, 0.813985722935859, -0.45538889804012006, -0.632924493298586, 1.0689641659298372, -0.3891141606940193, 0.26301117032392374, 1.0724424784547402, -0.15061227935724156, -0.7912865898823304, -0.6630725241873179, -1.138703621026941, 1.4765733421485785, -0.07632106144922882, 0.9903252997901124, -0.3731061196317457, -1.279245072785572, 0.536055025764815, -1.581645123673991, 0.4447427273597046, 0.18258509824656471, 1.9181246083327759, -1.134758079328774, -0.4319923102256462, 0.0042885376205295846, 2.0031756159310237, 0.0757087705977133, -0.06016655859492269, -0.41549973927049777, -0.5639994550636441,},
			want1:   []float64{0, 0, 0, 0, 0, 0, 0, -1.233758177597947, -0.4760736667708704, 0.3567728638933485, 0.23884817441386116, -0.5963396890157341, 1.436763245980086, 1.225913365602659, 0.7405031099986114, 0.14089779406595593, 0.8679989172472634, -0.26472379244661004, 0.8594246470367166, 0.7861508274302224, -0.8374721235896184, -0.08514969108973203, -0.40001241963572765, 0.0626799488844795, 0.11886278311457737, 0.5217273755096011, -0.5634276334919613, 0.03155985270211609, -0.3171492982219286, 0.1551792871104546, 0.44103994889118925, 0.4231501591102441, -0.06874414258538547, 0.08527933688684992, -0.4546151556865299, 0.3402450907741782, -0.3151720498096737, -0.14328871657518105, 0.3513153308590429, 0.058657398219049695, -0.5100458871541598, 0.6631907781998214, -0.05522164789961834, -0.26037870772161364, -0.014451022075821385, -0.8229342900579675, 0.5093459398325537, 0.03518295338023633, 0.21340631469630478, -0.4654866428876044, -0.12384765558809319, 0.43822813812380657, -0.41131724631749145, -0.06350898705975411, 0.22698609631288497, 0.6121138350196307, -0.13548463916671927, 0.011364497604322732, -0.002127869017891946, 0.37968472950091714, 0.11555734720289434, 0.07017275657976162, -0.04281310893574147, 0.08754187609745512,},
			want2:   [][]float64{{0, 0, 0, 0, 0, 0, 0, 0,}, {0, 0, 0, 0, 0, 0, 0, 0,}, {0, 0, 0, 0, 0, 0, 0, 0,}, {0, 0, 0, 0, 0, 0, 0, 0,}, {0, 0, 0, 0, 0, 0, 0, 0,}, {0, 0, 0, 0, 0, 0, 0, 0,}, {0, 0, 0, 0, 0, 0, 0, 0,}, {0, 0, 0, 0, 0, 0, 0, 0,}, {0.02088741215482747, 0.0014365479386798455, -0.006682011007586689, -0.004783401886358042, 0.010794142119518344, -0.030198440834423503, -0.01075237064495689, -0.009932408627899106,}, {0.03964938239046904, 0.0028903186235707777, -0.012332010240268025, -0.004053856604849231, 0.02017477427803213, -0.05870048580079738, -0.02208983810016802, -0.017566969060746063,}, {0.060221835789328604, 0.00764555265126503, -0.023608682319951262, 0.009811481770257422, 0.03320824801383, -0.07994334659905604, -0.03410480312607012, -0.02025552174035784,}, {0.08116074615381833, 0.009602905877058, -0.02317693497371936, 0.027842791577694044, 0.04823309608525453, -0.0972498636086612, -0.04378132260421744, -0.028635861683265165,}, {0.09213226615374498, -0.005773621792275458, -0.033422527865316326, 0.04136695950919452, 0.04705221036006868, -0.10348979470896653, -0.0362642968120412, -0.03464120611407411,}, {0.13454382153718414, -1.531633648025124e-05, -0.03259242935518446, 0.04206087280813292, 0.05523160470466901, -0.12550831770324242, -0.010552409860983582, -0.0313847174617429,}, {0.18152531086420132, 0.01511307852387693, -0.0366078453228049, 0.04896056375346992, 0.05516415567183954, -0.1328674051974237, 0.01589753268854014, -0.04305594531274694,}, {0.23658543836734539, 0.02068796228229024, -0.029324896387664633, 0.04820689033464602, 0.07048135601093082, -0.1315560219280536, 0.02210110105412271, -0.057887780737546135,}, {0.2629698667026087, 0.03807179757506117, -0.009504478339947872, 0.055955851363318154, 0.07869002793200806, -0.11296538359036323, 0.03191033383828745, -0.05554829515273494,}, {0.2860450926298997, 0.04535442539636825, 0.011194236541700788, 0.07073043845091975, 0.07103665890539697, -0.09909805698916808, 0.022436497250575796, -0.06390195990339877,}, {0.30350126860495097, 0.04585693081034595, 0.024467964769278202, 0.08579969163569028, 0.06658795945558715, -0.09193676991845612, 0.004414098042115566, -0.0645557029000683,}, {0.3272348288213948, 0.05604305812003013, 0.016891012683420775, 0.0980673219356921, 0.04366001823349703, -0.09021470145011426, -1.649477662708787e-05, -0.05535306431826035,}, {0.36743303791265713, 0.04859700831540383, 0.011205014889964384, 0.09158040677389681, 0.020607822485414394, -0.08486230200911228, 0.007741350107442638, -0.059438095615561105,}, {0.4043139436396299, 0.04409029786648018, 0.0020644502640423043, 0.08659609691207167, 0.008924096660277362, -0.08598683478164795, 0.027789906449459098, -0.06451955155705652,}, {0.4377133106532437, 0.04248680162954863, -0.002852369689177313, 0.0764656301479335, -0.004069341779158159, -0.0827138415967347, 0.04597053412249795, -0.06558818694088182,}, {0.46098220142741086, 0.03891147428434469, 0.005095062231138307, 0.06419734384465077, -0.010700601170601277, -0.0781710759648472, 0.06185858118763254, -0.06758580416557669,}, {0.48334584207062664, 0.04242933033940439, 0.00981470042764547, 0.06117593242644382, -0.016592889692914142, -0.07379562793359142, 0.0749009378112049, -0.07234479262263308,}, {0.48989222036906704, 0.04610358067198051, 0.005468456375646174, 0.054338906097138824, -0.011879286255567254, -0.06864095303972602, 0.0818171130432635, -0.07465013667287625,}, {0.49836608278439154, 0.03883570506833628, 0.003552853125424739, 0.04561051133945914, -0.005290791496145964, -0.057750150531863824, 0.09064087863004311, -0.07453845558933751,}, {0.5153868984233366, 0.029496518514062334, 0.011144275526880753, 0.032458478137149555, -0.014370499095897476, -0.04862165864424875, 0.09268197568173255, -0.07552250689023925,}, {0.5305421299941492, 0.02242055622206139, 0.019080706862637378, 0.018888815842352892, -0.021695754018449212, -0.04320832047015576, 0.09767324121492682, -0.07386721081880548,}, {0.5435691527428844, 0.014422667487820335, 0.025803576516383524, 0.004304230487869015, -0.025419431162463774, -0.042809851940843066, 0.10129558877863779, -0.0739173110535101,}, {0.554042805007386, 0.010160145694340515, 0.030308204171280585, -0.004829200700465327, -0.033728231519543475, -0.0468546712440697, 0.10367163049539681, -0.07676767845976902,}, {0.5643672669298405, 0.013993748725705406, 0.02876816200673868, -0.006122440246135513, -0.04494204312894715, -0.043467016645859474, 0.10532224938412087, -0.08388680757423822,}, {0.5839418207355398, 0.01800440470157627, 0.028865749259057816, -0.02137543817062231, -0.05003124321336858, -0.043123246514236116, 0.10034738236312243, -0.0842009535911932,}, {0.5991171632071579, 0.026653645351647392, 0.0281882479436127, -0.03053617599150285, -0.05616964361713678, -0.04480489076101691, 0.09288488874150655, -0.08049244517923544,}, {0.6124538654867708, 0.03111740719896653, 0.026107213589703644, -0.03992472469411322, -0.06295007316226256, -0.04415162317663512, 0.08582039549854815, -0.07559564568022824,}, {0.6318160309144711, 0.02688160370623132, 0.03036317493005289, -0.04564207553161597, -0.06385004104990691, -0.05235637887982757, 0.08288233835060732, -0.07746071473567355,}, {0.6430797502073727, 0.022107338843987134, 0.03630450288215531, -0.039192183760582186, -0.06198735723086108, -0.05201629084618201, 0.08604350149388242, -0.08126942677111104,}, {0.6567061428041852, 0.016520321525476132, 0.032758917408606786, -0.037075684923546, -0.06906316164771015, -0.05872819769626461, 0.08709187707644886, -0.08028357093767377,}, {0.667921554637851, 0.016040574240502547, 0.029176170543123388, -0.032294426004504065, -0.07371419558592118, -0.06633017052834918, 0.08808389266446678, -0.08341870278584722,}, {0.6753262993796014, 0.014863249174614884, 0.025023978383337614, -0.026259776219607588, -0.07665151953775425, -0.07378428420787224, 0.0887071621531438, -0.08444697821238109,}, {0.6819384695460262, 0.013729087637395925, 0.022672988239961757, -0.020623358139780074, -0.0800077702931302, -0.08140077764906657, 0.08725182903223162, -0.0841530373358629,}, {0.686510616389887, 0.0052778284071992015, 0.023367830375603953, -0.013239689063271404, -0.08015296190291753, -0.07635644435569701, 0.08014742103242728, -0.0869738122069461,}, {0.6990127352978044, -0.0004063186846624692, 0.018736150118100765, -0.009040212864749054, -0.08849475158203042, -0.06636680283354825, 0.07322959904613795, -0.08665225012223952,}, {0.7060402229677187, -0.006361307796762082, 0.014702343423028863, -0.010611612208893742, -0.09262150279578357, -0.053997473149665326, 0.06913072344213618, -0.0826721350547171,}, {0.7159151761093053, -0.0119859491483299, 0.018966998537902093, -0.01629648928415675, -0.09487331148879186, -0.04438887499527217, 0.06452972124426232, -0.07426338387870178,}, {0.7230880990381713, -0.014342924747577852, 0.01947371044543612, -0.022244463870787542, -0.10025248209474218, -0.03937665473864649, 0.06441359214933934, -0.067094890373372,}, {0.7366425958417856, -0.018340549749396234, 0.01757432584595797, -0.02754680341160141, -0.10144908988391736, -0.030654337842512133, 0.06142990805333977, -0.05612879351242398,}, {0.7494443950053354, -0.022290045564758183, 0.016229179906895888, -0.03448577281994922, -0.10245743677151561, -0.022242158431675436, 0.057773758176622295, -0.04875026362146599,}, {0.7615386923087097, -0.024449459963201626, 0.013766210094656475, -0.042816584690550274, -0.102303851163156, -0.017079778875802747, 0.05352227124875053, -0.041550554899298035,}, {0.770704903638994, -0.02820048382594075, 0.014433372477699115, -0.04988862148890248, -0.10114277245856135, -0.014671629834374061, 0.04791537691586498, -0.03422652124417553,}, {0.7772134246453717, -0.02392693138104843, 0.013851871672420607, -0.049253084480825736, -0.10427214733937236, -0.015775162906727466, 0.03851770306064262, -0.02971952354196284,}, {0.7817430754150944, -0.021376671211219354, 0.014292254770044567, -0.04399460210017744, -0.10593554390723231, -0.020767058243974894, 0.03304216899785805, -0.025605020032050493,}, {0.7878544170867989, -0.025534830278748432, 0.012640147597626817, -0.037585721227246446, -0.09999282359722692, -0.025904725439208104, 0.026530018138811076, -0.02089552115838458,}, {0.8000874436508584, -0.025886704885833188, 0.010182862059097934, -0.0377361489728687, -0.09337512203681642, -0.030541168988621657, 0.017569157968688978, -0.023262478881397684,}, {0.8049781792494881, -0.030590087353059032, 0.009486322038611902, -0.04040523233187925, -0.08621199322288789, -0.03241903179195251, 0.01594760444109282, -0.026996244217201384,}, {0.8117674200035087, -0.029343126819448614, 0.007272036541997416, -0.04130843003471118, -0.07435171653564751, -0.028468747009800788, 0.015998026218201834, -0.02725090720966296,}, {0.823147636274275, -0.02998389394303328, 0.004428349572067933, -0.03930024627672888, -0.06399333828901395, -0.023174413317257784, 0.017737085167454206, -0.026162584277518733,}, {0.8336162143051765, -0.030769712270589965, 0.0013540265926833932, -0.040410379777783216, -0.05500938813741656, -0.018738833494132835, 0.018588928185211278, -0.027813463950560367,}, {0.8433676540314676, -0.03084912928274937, 0.0009589454689423116, -0.04072579916119182, -0.04582830655287902, -0.014159450033344127, 0.018228077056932458, -0.025416420248852524,}, {0.8520475604560324, -0.03280434044321851, 0.0018569649739534856, -0.04093371085348937, -0.03798264561041105, -0.01439344224943667, 0.020672178505306484, -0.024392459917014157,}, {0.8577965849643648, -0.03214272174091059, 0.0021719467262316682, -0.041446163125642185, -0.039211742841051736, -0.007460922873263243, 0.020953820078615796, -0.022149512060544142,}, {0.8633364186904952, -0.03170532919435428, 0.0018511393222894583, -0.042992712878041496, -0.03724552435841205, -0.001294347645683449, 0.021923207521529577, -0.01935444230893096,}, {0.868408457811027, -0.03170644552525362, 0.00101222776577329, -0.04244184410309007, -0.035163518112012744, 0.004928530977127729, 0.02336844517947944, -0.01776703130197417,}, {0.8730893110360608, -0.031547273768758446, -0.00032649048231182505, -0.04194309400800098, -0.03349815530116493, 0.010385718035964362, 0.02497979386691315, -0.01612316536453232,},},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			af := Must(NewFiltAP(L, 0.1, 4, 1e-5, nil))
			got, got1, got2, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Run() got = %v,\n want %v", got, tt.want)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("Run() got1 = %v,\n want %v", got1, tt.want1)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got1[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got2, tt.want2) {
				t.Errorf("Run() got2 = %v,\n want %v", got2, tt.want2)
				fmt.Println(len(got2), len(got2[0]))
				for i := 0; i < n; i++ {
					fmt.Print("{")
					for k := 0; k < L; k++ {
						fmt.Printf("%g, ", got2[i][k])
					}
					fmt.Print("}, ")
				}
				fmt.Println("")
			}
		})
	}
}

/*
func TestNewFiltAP(t *testing.T) {
	type args struct {
		n     int
		mu    float64
		order int
		eps   float64
		w     interface{}
	}
	tests := []struct {
		name    string
		args    args
		want    AdaptiveFilter
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewFiltAP(tt.args.n, tt.args.mu, tt.args.order, tt.args.eps, tt.args.w)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewFiltAP() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewFiltAP() got = %v, want %v", got, tt.want)
			}
		})
	}
}
*/

func ExampleFiltAP_Run() {
	rand.Seed(1)

	//filter coefficients
	const (
		//number of samples
		n = 256
		//length of filter
		L = 8
		//order of filter
		order = 4
		//step size
		mu = 1.0
		//small value (epsilon)
		eps = 1e-5
	)
	//input value
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//desired value
	var d = make([]float64, n)

	//create data
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, 0.2*rand.NormFloat64()+math.Sin(2*math.Pi*1200*float64(i)/48000))
		copy(x[i], xRow)
		//input value + noise
		d[i] = x[i][0] * rand.NormFloat64() * 0.1
	}

	//make filter instance
	af := Must(NewFiltAP(L, mu, order, eps, nil))

	y, e, w, err := af.Run(d, x)
	if err != nil {
		log.Fatalln(err)
	}
	//print result of filtering (only the last value)
	fmt.Println(y[n-1], e[n-1], w[n-1])
	//output:
	//0.060762632541388584 -0.10008683936603179 [0.00041566825015026433 0.06047488709085837 -0.06457962483483026 0.05134559397648346 0.02852300735388784 -0.027374792502793902 0.006650576730583262 -0.007351487212510041]
}

func ExampleExploreLearning_ap() {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 8
	order := 4
	mu := 1.0
	eps := 0.001
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][L-1]
	}

	af, err := NewFiltAP(L, mu, order, eps, nil)
	check(err)
	es, mus, err := ExploreLearning(af, d, x, 0.001, 5.0, 100, 0.5, 100, "MSE", nil)
	check(err)

	res := make(map[float64]float64, len(es))
	for i := 0; i < len(es); i++ {
		res[es[i]] = mus[i]
	}
	//for i := 0; i < len(es); i++ {
	//	fmt.Println(es[i], mus[i])
	//}
	eMin := floats.Min(es)
	fmt.Printf("the step size mu with the smallest error is %.3f\n", res[eMin])
	//output:
	//the step size mu with the smallest error is 2.071
}

func BenchmarkFiltAP_Adapt(b *testing.B) {
	rand.Seed(1)
	const (
		L     = 8
		mu    = 0.1
		order = 4
		eps   = 1e-5
	)
	af, err := NewFiltAP(L, mu, order, eps, nil)
	if err != nil {
		log.Fatalln(err)
	}
	n := b.N
	var x = make([][]float64, n)
	for i := 0; i < n; i++ {
		x[i] = make([]float64, L)
	}
	//noise
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		copy(x[i], xRow)
		d[i] = x[i][L-1]
	}
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		af.Adapt(d[i], x[i])
		af.Predict(x[i])
	}
	b.StopTimer()
}
