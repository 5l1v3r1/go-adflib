package adf

import (
	"fmt"
	"math/rand"
	"reflect"
	"testing"

	"gonum.org/v1/gonum/floats"
	"github.com/tetsuzawa/go-adflib/misc"
)

func TestFiltNLMS_Run(t *testing.T) {
	rand.Seed(1)
	//creation of data
	//number of samples
	n := 64
	L := 4
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][0]
	}
	//type fields struct {
	//	filtBase filtBase
	//	kind           string
	//	eps            float64
	//	wHist       [][]float64
	//}
	type args struct {
		d []float64
		x [][]float64
	}
	tests := []struct {
		name string
		//fields  fields
		args    args
		want    []float64
		want1   []float64
		want2   [][]float64
		wantErr bool
	}{
		{
			name: "Run NLMS Filter",
			args: args{
				d: d,
				x: x,
			},
			want:    []float64{0, 0, 0, 0, -0.4035086679814417, 0.7266058863316438, -0.8562576196350541, -0.18756022916406317, 2.2279058312697497, 1.055894807342654, 0.801755947482026, 0.5424584704464248, 1.3566563849134592, -0.5765859749349965, 1.307184913346369, 1.3486056321222222, -1.1929569776739506, 0.04609016277356551, -0.9505578592015124, 0.2364953858501631, 0.16208913691501906, 0.5567766378915298, -1.107283363340029, 0.42030530135309646, -1.2007078183881277, 0.8933172235588728, 0.9736304440946405, 0.48130258883274574, 0.26611362579759396, 0.10049634391518075, -1.6049848752693616, 1.1069476381510204, -0.751254378315831, -0.8152715441280423, 1.4282393483186997, -0.3409487495842989, -0.20596953922497463, 1.7430026126629359, -0.22918128074819052, -1.074555123063337, -0.6506464810514031, -1.9776723604916777, 1.9711612910024752, -0.0420692671269738, 1.223619515137119, -0.8407166699833701, -1.4076124899550266, 0.9601064462842746, -2.0022600633326166, 0.3882158519253961, 0.4031904794016355, 2.531366437099778, -1.263348622486011, -0.4232984299478078, 0.007622655496809129, 2.3872040045024074, 0.19049741058346212, 0.009526371837716848, -0.4589892256327549, -0.48082358513308726, 2.7294281446364725, 0.05235480721393038, 0.7997803994691149, 0.723525276959919,},
			want1:   []float64{0, 0, 0, -1.233758177597947, -0.1174859031717086, -0.4038006337200639, 1.0150653598114898, -0.5437227870134158, -0.6425018689891266, 0.24294604017478028, -0.06931402167751288, 0.15766243199356, -0.3570302639021967, 0.2600487320409083, -0.20645571959634834, -0.35889521191369056, -0.24208994445827758, 0.09126021079978527, 0.10446348574591524, -0.08036889056734847, 0.11765458174815244, 0.14597362367065148, 0.037737960987008545, -0.09001591574043472, 0.07999372603149446, 0.03398124720521045, -0.0005960622514552538, 0.02881352165327039, -0.014573581738444752, 0.06619437500311681, -0.0336562025870728, 0.04728317555901684, -0.019306569533962814, 0.039058334254275184, -0.007959851529819595, 0.010491987109329304, -0.041065177605261405, -0.007369356008374295, 0.02334735349133063, 0.022889825459393, -0.026877065211736162, 0.016034449406769236, 0.014757990978657043, 0.000931159057981315, -0.019887900650701784, 0.002123907464020025, 0.00451976158136147, 0.014176717604347022, 0.009297693341134172, -0.006982111625445597, 0.006380715157814187, -0.0011279937473713808, -0.006894096009482098, 0.002670617326484326, -0.005461986894171491, -0.004343659070466632, 0.0007687072171455311, 0.0004798261471220793, 0.0006763774265156619, 0.004366006166898251, 0.0016937263879737152, 0.00011583143333920853, 9.600268445064675e-05, 0.0018122109837923617,},
			want2:   [][]float64{{0, 0, 0, 0, }, {0, 0, 0, 0, }, {0, 0, 0, 0, }, {0, 0, 0, 0, }, {1.215018597139067, 0.5130811729994111, -0.3179021564346279, -0.156395605871216, }, {1.3154378567899434, 0.4508619748090713, -0.3485116034007433, -0.015444234886170694, }, {1.252472567633569, 0.41988547984939506, -0.20587003794838266, -0.3246877125156295, }, {1.3044508188922166, 0.18053434801020055, 0.3130374498499058, 0.1004268054685098, }, {1.420226315541596, -0.07046413966476298, 0.10740715232726131, -0.015532167803016514, }, {1.1210974850903483, -0.31552517956610493, -0.030787592893504634, -0.14762868812461477, }, {1.2515528715179545, -0.24195881872271047, 0.03953244904883706, -0.047226385449187974, }, {1.2148990500987131, -0.27699518901476605, -0.010492154997838996, -0.031385812750082925, }, {1.275385838855309, -0.19063271389588238, -0.03783931929161073, 0.06371143972236826, }, {1.1089000089943042, -0.13791403792548626, -0.22116367368955092, -0.10112294902270605, }, {1.0798578365103388, -0.03692255012851803, -0.13035811643481918, -0.2327879621317408, }, {0.9981521338099031, -0.11038747302893333, -0.023836441669882094, -0.24298330250492128, }, {0.8536667078416197, 0.099111549710528, -0.0438878898788108, -0.1194640351900009, }, {1.0428729044098182, 0.08100235663799629, 0.06766685852023542, -0.140048797890368, }, {1.0658500265647048, -0.060539404535804364, 0.09378500774981706, -0.0932509230207138, }, {0.9624707386386789, -0.04146322767529194, 0.12796524501940681, -0.007386007818155252, }, {0.9514040658346071, -0.06129222721718073, 0.07815238530205562, 0.06842629422256742, }, {0.9790849965779813, 0.008245639131171982, -0.027680240184258284, 0.10110877106997102, }, {1.0315228462510413, -0.07156174635798662, -0.003034692400521781, 0.017483278038010128, }, {1.0131322207269793, -0.06588248450335984, -0.02230515361397379, 0.03342799519292408, }, {0.9987435951736227, -0.017060039309192074, -0.06270169995552571, -0.008960976359744244, }, {0.9573301875111621, 0.017206139599807366, -0.02674545580754098, 0.009889189425467994, }, {0.9800367346199135, 0.04103261157872882, -0.014254358432884952, 0.016048593371707862, }, {0.979350889780562, 0.040673055422877316, -0.01443165683500453, 0.015931101152037944, }, {0.9867812576139131, 0.044336995874387636, -0.012003634409308878, -0.007937398009283898, }, {0.9854116297352358, 0.04342936998682288, -0.0030812836489255545, -0.014222149635207612, }, {0.9890627058150945, 0.0075377301783229045, 0.02220017498248198, -0.031099973805769635, }, {1.0052999910150828, -0.0038995364458856343, 0.02983565906944117, -0.02340848148628867, }, {1.0237291128656174, -0.016202761617584056, 0.017442186588163364, -0.000731471310130162, }, {1.0306018923550595, -0.009279568529301216, 0.0047744439234930595, 0.002215935336447127, }, {1.013921414867904, 0.021241607702044082, -0.0023269252838648644, -0.0030927311229947507, }, {1.0105841092831442, 0.02201809937246725, -0.0017464547905773997, -0.007171040056992688, }, {1.008933868745349, 0.020784453249135568, 0.006920979754943836, -0.00819893698447216, }, {1.012622283060772, -0.005129858035979033, 0.00999423526184354, 0.007503217710576656, }, {1.0083724772081593, -0.004625860877956965, 0.012569303076205303, 0.009162176203767797, }, {1.0070203009737777, -0.011534521859629703, 0.00811847589868302, -0.003724329918816178, }, {1.0030712362948169, -0.014078662387807223, 0.0007524108538199108, 0.003732913093392144, }, {1.006458287482156, -0.004272113150492677, -0.009175524933936873, 0.0039385692341247745, }, {1.0012344640385014, 0.0010163713571711515, -0.00928507533166524, 0.007144095285639826, }, {1.0086122334873702, 0.0008635416426658892, -0.004813164307599931, 0.004028689680037547, }, {1.0085979705964014, 0.0012808844320883858, -0.005103910715260467, 0.0035422268954510296, }, {1.0013501201996369, 0.006330178488507332, 0.00334432314821545, -0.002324079622521513, }, {1.0009900566318373, 0.005727737594295107, 0.0037626476171543724, -0.003179790729869818, }, {0.9996063716629603, 0.006688544347862421, 0.0017972521595846671, -0.0028038302638119295, }, {1.0036569489837066, -0.001597186614343848, 0.003382229504568107, -0.001101040096226606, }, {1.0009954721601164, -0.0010880727547664271, 0.003929186265189127, 0.00227793538095121, }, {1.0005048940225536, -0.0016151160161216678, 0.0006732318941175203, 0.003912505570362899, }, {1.0009847211402774, 0.0013491476712541282, -0.0008149023070215926, 0.0034197252341343107, }, {1.0004499639951405, 0.001617609077157654, -0.0007260040734051123, 0.0034192685842969923, }, {1.0022498295196323, 0.002213616035163421, -0.0007290656244544624, 4.28838013154173e-05, }, {1.0019571525399136, 0.002215119449682903, 0.0009289521006363374, 0.00017596865210436593, }, {1.0019539825917076, -0.0012808094808096906, 0.0006483428085626375, 0.00016128841409272782, }, {0.9992723984497698, -0.0014960533952788624, 0.0006370821982257061, 0.00067705698112281, }, {0.99974877816462, -0.0014711313139527677, -0.0005044213072112634, -0.0005096389596751952, }, {0.9997497115119317, -0.001513881324039125, -0.0005488638018658322, -0.0002548883281135271, }, {0.9996894700473012, -0.0015765077646976156, -0.00018988023367926, -0.0002479914930486167, }, {0.9993060765390903, 0.0006211577604379121, -0.00014765842188083805, 0.0003956490606857932, }, {1.0001290718246076, 0.0006369692438773471, 9.337604639133416e-05, 0.0006142219992718977, }, {1.000132853699306, 0.0006946211498780446, 0.000145655484265893, 0.0005321003230742256, }, {1.0001665839546579, 0.0007252081488428532, 9.760876213254536e-05, 0.0004892932332920675, },},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			//af := &FiltNLMS{
			//	filtBase: tt.fields.filtBase,
			//	kind:           tt.fields.kind,
			//	eps:            tt.fields.eps,
			//	wHist:       tt.fields.wHist,
			//}
			af := Must(NewFiltNLMS(L, 1.535, 1e-5, "zeros"))
			got, got1, got2, err := af.Run(tt.args.d, tt.args.x)
			if (err != nil) != tt.wantErr {
				t.Errorf("Run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Run() got = %v\n, want %v\n", got, tt.want)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("Run() got1 = %v\n, want %v\n", got1, tt.want1)
				for i := 0; i < n; i++ {
					fmt.Printf("%g, ", got1[i])
				}
				fmt.Println("")
			}
			if !reflect.DeepEqual(got2, tt.want2) {
				t.Errorf("Run() got2 = %v\n, want %v\n", got2, tt.want2)
				for i := 0; i < n; i++ {
					fmt.Print("{")
					for k := 0; k < L; k++ {
						fmt.Printf("%g, ", got2[i][k])
					}
					fmt.Print("}, ")
				}
				fmt.Println("")
			}
		})
	}
}

/*
func TestNewFiltNLMS(t *testing.T) {
	type args struct {
		n   int
		mu  float64
		eps float64
		w   interface{}
	}
	tests := []struct {
		name    string
		args    args
		want    AdaptiveFilter
		wantErr bool
	}{
		{
			name: "TestNewFiltNLMS",
			args: args{
				n:   4,
				mu:  1.0,
				eps: 1e-5,
				w:   "zeros",
			},
			want: &FiltLMS{
				filtBase: filtBase{
					w:  mat.NewDense(1, 4, []float64{0, 0, 0, 0}),
					n:  4,
					mu: 1.0,
				},
				kind:     "LMS Filter",
				wHist: nil,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewFiltNLMS(tt.args.n, tt.args.mu, tt.args.eps, tt.args.w)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewFiltNLMS() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewFiltNLMS() got = %v, want %v", got, tt.want)
			}
		})
	}
}
*/

func ExampleExploreLearning_nlms() {
	rand.Seed(1)
	//creation of data
	//number of samples
	//n := 64
	n := 512
	L := 8
	mu := 1.0
	eps := 0.001
	//input value
	var x = make([][]float64, n)
	//noise
	var v = make([]float64, n)
	//desired value
	var d = make([]float64, n)
	var xRow = make([]float64, L)
	for i := 0; i < n; i++ {
		xRow = misc.Unset(xRow, 0)
		xRow = append(xRow, rand.NormFloat64())
		x[i] = append([]float64{}, xRow...)
		v[i] = rand.NormFloat64() * 0.1
		d[i] = x[i][L-1]
	}

	af, err := NewFiltNLMS(L, mu, eps, "zeros")
	check(err)
	es, mus, err := ExploreLearning(af, d, x, 0.00001, 2.0, 100, 0.5, 100, "MSE", nil)
	check(err)

	res := make(map[float64]float64, len(es))
	for i := 0; i < len(es); i++ {
		res[es[i]] = mus[i]
	}
	eMin := floats.Min(es)
	fmt.Printf("the step size mu with the smallest error is %.3f\n", res[eMin])
	//output:
	//the step size mu with the smallest error is 1.535
}
